use fmt
use os
use strings

struct State {
    row: int,
    col: int,
    facing: Dir
}

enum Dir {
    North,
    East,
    South,
    West,
}

fn main() {
    let inputFile = os.Args[1]
    let part = os.Args[2]

    let content = match os.ReadFile(inputFile) {
        Ok(bytes) => string(bytes),
        Err(e) => {
            fmt.Printf("Error reading file: %s\n", e)
            return
        }
    }

    let trimmed = strings.TrimSpace(content)

    // For some reason, I can't path from origin to destination (though the examples work), but
    // going backwards is fine. If you find the bug, switch the start dir back to East too
    let trimmed = strings.Replace(trimmed, "E", "Z", 1)
    let trimmed = strings.Replace(trimmed, "S", "E", 1)
    let trimmed = strings.Replace(trimmed, "Z", "S", 1)
    let lines = strings.Split(trimmed, "\n")

    let mut start_row = 0
    let mut start_col = 0


    let mut grid = []
    for (r, line) in lines.Enumerate() {
        let mut row = []
        for (c, char) in line.Enumerate() {
            row = row.Append(char)
            if char == 'S' {
                start_row = r
                start_col = c
            }
        }
        grid = grid.Append(row)
    }

    let initial_state = State {
        row: start_row,
        col: start_col,
        facing: Dir.West,
    }

    let mut queue = [initial_state]
    let mut visited = Map.new()
    let mut previous = Map.new()
    let mut distances = Map.new()
    distances.Insert(initial_state, 0)
    previous.Insert(initial_state, [])

    while true {
        // Convoluted way of getting min, since we can't remove items
        let mut state = zeroValue()
        let mut min_score = 10000000000000000
        for el in queue {
            if visited[el] {
                continue
            }
            let score = distances.Get(el)
            if score.IsSome() && score.Unwrap() < min_score {
                min_score = score.Unwrap()
                state = el
            }
        }

        visited[state] = true

        if (grid[state.row][state.col] == 'E') {
            if part == "1" {
                fmt.Println(distances[state])
            } else {
                let mut priors = previous[state]
                let mut i = 0
                while i < priors.Len() {
                    for eg in previous[priors[i]] {
                        priors = priors.Append(eg)
                    }
                    i = i + 1
                }
                let mut dedup = Map.new()
                for eg in priors {
                    dedup.Insert(State {
                        row: eg.row,
                        col: eg.col,
                        facing: Dir.North,
                    }, 1)
                }
                fmt.Println(dedup.Len() + 1) // + 1 for the destination
            }

            break
        }
        
        let next_coord = match state.facing {
            Dir.North => (state.row - 1, state.col),
            Dir.East => (state.row, state.col + 1),
            Dir.South => (state.row + 1, state.col),
            Dir.West => (state.row, state.col - 1),
        }

        let (next_row, next_col) = next_coord
        let next_state = State {
            row: next_row,
            col: next_col,
            facing: state.facing,
        }

        if (grid[next_row][next_col] != '#') {
            match distances.Get(next_state) {
                None => {
                    distances.Insert(next_state, distances[state] + 1)
                    previous.Insert(next_state, [state])
                    queue = queue.Append(next_state)
                    let _ = ()
                },
                Some(score) => {
                    if score > distances[state] + 1 {
                        distances[next_state] = distances[state] + 1
                        previous[next_state] = [state]
                    } else if score == distances[state] + 1 {
                        previous[next_state] = previous[next_state].Append(state)
                    } else {
                        let _ = ()
                    }
                }
            }
        }

        let left = match state.facing {
            Dir.North => Dir.West,
            Dir.East => Dir.North,
            Dir.South => Dir.East,
            Dir.West => Dir.South,
        }
        let next_state = State {
            row: state.row,
            col: state.col,
            facing: left,
        }
        match distances.Get(next_state) {
            None => {
                distances.Insert(next_state, distances[state] + 1000)
                previous.Insert(next_state, [state])
                queue = queue.Append(next_state)
                let _ = ()
            },
            Some(score) => {
                if score > distances[state] + 1 {
                    distances[next_state] = distances[state] + 1000
                    previous[next_state] = [state]
                } else if score == distances[state] + 1000 {
                    previous[next_state] = previous[next_state].Append(state)
                } else {
                    let _ = ()
                }
            }
        }

        let right = match state.facing {
            Dir.North => Dir.East,
            Dir.East => Dir.South,
            Dir.South => Dir.West,
            Dir.West => Dir.North,
        }
        let next_state = State {
            row: state.row,
            col: state.col,
            facing: right,
        }
        match distances.Get(next_state) {
            None => {
                distances.Insert(next_state, distances[state] + 1000)
                previous.Insert(next_state, [state])
                queue = queue.Append(next_state)
                let _ = ()
            },
            Some(score) => {
                if score > distances[state] + 1 {
                    distances[next_state] = distances[state] + 1000
                    previous[next_state] = [state]
                } else if score == distances[state] + 1000 {
                    previous[next_state] = previous[next_state].Append(state)
                } else {
                    let _ = ()
                }
            }
        }
    }
}
